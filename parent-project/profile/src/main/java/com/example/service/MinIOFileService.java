package com.example.service;

import com.example.config.ApiPathsConfig;
import com.example.integration.IntegrationHelper;
import com.example.model.dto.FileDTO;
import lombok.SneakyThrows;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.*;
import org.springframework.http.converter.ByteArrayHttpMessageConverter;
import org.springframework.http.converter.FormHttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.UUID;

@Service
public class MinIOFileService {

    private final RestTemplate restTemplate;

    private final ApiPathsConfig apiPathsConfig;

    private final IntegrationHelper integrationHelper;

    public MinIOFileService(RestTemplate restTemplate, ApiPathsConfig apiPathsConfig, IntegrationHelper integrationHelper) {
        this.restTemplate = restTemplate;
        this.apiPathsConfig = apiPathsConfig;
        this.integrationHelper = integrationHelper;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ minOP –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     *
     * @param profileId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ
     */
    public String getPhotoUrl(UUID profileId) {
        String url = "http://localhost:8030/api/files/get-photo" + "?profileId=" + profileId;

        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        HttpHeaders headers = integrationHelper.createAuthHeaders();
        HttpEntity<Void> entity = new HttpEntity<>(headers);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);

        if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
            return response.getBody();
        } else {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ: " + response.getStatusCode());
        }

    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ minOP –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     *
     * @param profileId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª—ã
     */
    public List<String> getFiles(UUID profileId) {
        String url = "http://localhost:8030/api/files/get-files" + "?profileId=" + profileId;

        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        HttpHeaders headers = integrationHelper.createAuthHeaders();
        HttpEntity<Void> entity = new HttpEntity<>(headers);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        ResponseEntity<List<String>> response = restTemplate.exchange(
                url, HttpMethod.GET, entity,
                new ParameterizedTypeReference<>() {
                } // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫
        );

        if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
            return response.getBody();
        } else {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: " + response.getStatusCode());
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏ (–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞)
     *
     * @param path –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
     * @return —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª
     */
    public String getFile(String path) {
        String url = "http://localhost:8030/api/files/get-file" + "?path=" + path;

        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        HttpHeaders headers = integrationHelper.createAuthHeaders();
        HttpEntity<Void> entity = new HttpEntity<>(headers);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, entity, String.class);

        if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
            return response.getBody(); // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        } else {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + response.getStatusCode());
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏–∏—Ç—å —Ñ–æ—Ç–æ
     */
    @SneakyThrows
    public String savePhoto(UUID profileId, MultipartFile photo) {

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É multipart/form-data
        restTemplate.setMessageConverters(List.of(
                new FormHttpMessageConverter(),
                new ByteArrayHttpMessageConverter()
        ));

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        restTemplate.getMessageConverters().add(new StringHttpMessageConverter(StandardCharsets.UTF_8));

        String url = "http://localhost:8030/api/files/upload-photo";
        HttpHeaders headers = integrationHelper.createAuthHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("profileId", profileId.toString());  // üëà –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        body.add("avatar", convertMultipartFileToResource(photo));

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        ResponseEntity<String> photoUrl = restTemplate.exchange(
                url,
                HttpMethod.POST,
                requestEntity,
                new ParameterizedTypeReference<>() {
                }
        );

        return photoUrl.getBody();
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è (—Ñ–æ—Ç–æ, —à–∞–±–ª–æ–Ω, —Ñ–∞–π–ª—ã)
     */
    @SneakyThrows
    public List<FileDTO> saveAllFilesForProfile(UUID profileId,
                                                MultipartFile photo,
                                                MultipartFile passport,
                                                MultipartFile diplom,
                                                List<MultipartFile> files) {

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É multipart/form-data
        restTemplate.setMessageConverters(List.of(
                new FormHttpMessageConverter(),
                new ByteArrayHttpMessageConverter()
        ));

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        restTemplate.getMessageConverters().add(new StringHttpMessageConverter(StandardCharsets.UTF_8));
        restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());

        String url = "http://localhost:8030/api/files/upload-all";
        HttpHeaders headers = integrationHelper.createAuthHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("profileId", profileId.toString());  // üëà –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        body.add("avatar", convertMultipartFileToResource(photo));
        body.add("passport", convertMultipartFileToResource(passport));
        body.add("diplom", convertMultipartFileToResource(diplom));

        for (MultipartFile file : files) {
            body.add("files", convertMultipartFileToResource(file));
        }

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        ResponseEntity<List<FileDTO>> response = restTemplate.exchange(
                url,
                HttpMethod.POST,
                requestEntity,
                new ParameterizedTypeReference<>() {
                }
        );

        System.out.println(response.getBody());

        return response.getBody();
    }

    @SneakyThrows
    public List<FileDTO> saveFiles(UUID profileId, List<MultipartFile> files) {

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É multipart/form-data
        restTemplate.setMessageConverters(List.of(
                new FormHttpMessageConverter(),
                new ByteArrayHttpMessageConverter()
        ));

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        restTemplate.getMessageConverters().add(new StringHttpMessageConverter(StandardCharsets.UTF_8));
        restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());

        String url = "http://localhost:8030/api/files/upload-all";
        HttpHeaders headers = integrationHelper.createAuthHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("profileId", profileId.toString());  // üëà –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É

        for (MultipartFile file : files) {
            body.add("files", convertMultipartFileToResource(file));
        }

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        ResponseEntity<List<FileDTO>> response = restTemplate.exchange(
                url,
                HttpMethod.POST,
                requestEntity,
                new ParameterizedTypeReference<>() {
                }
        );

        System.out.println(response.getBody());

        return response.getBody();
    }

    @SneakyThrows
    public FileDTO saveFile(UUID profileId, MultipartFile file) {

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É multipart/form-data
        restTemplate.setMessageConverters(List.of(
                new FormHttpMessageConverter(),
                new ByteArrayHttpMessageConverter()
        ));

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        restTemplate.getMessageConverters().add(new StringHttpMessageConverter(StandardCharsets.UTF_8));
        restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());

        String url = "http://localhost:8030/api/files/upload-file";
        HttpHeaders headers = integrationHelper.createAuthHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("profileId", profileId.toString());  // üëà –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        body.add("file", convertMultipartFileToResource(file));

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        ResponseEntity<FileDTO> response = restTemplate.exchange(
                url,
                HttpMethod.POST,
                requestEntity,
                new ParameterizedTypeReference<>() {
                }
        );

        System.out.println(response.getBody());

        return response.getBody();
    }

    @SneakyThrows
    public String savePassport(UUID profileId, MultipartFile pasport) {

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É multipart/form-data
        restTemplate.setMessageConverters(List.of(
                new FormHttpMessageConverter(),
                new ByteArrayHttpMessageConverter()
        ));

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        restTemplate.getMessageConverters().add(new StringHttpMessageConverter(StandardCharsets.UTF_8));
        restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());

        String url = "http://localhost:8030/api/files/upload-passport";
        HttpHeaders headers = integrationHelper.createAuthHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("profileId", profileId.toString());  // üëà –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        body.add("passport", convertMultipartFileToResource(pasport));

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        ResponseEntity<String> response = restTemplate.exchange(
                url,
                HttpMethod.POST,
                requestEntity,
                new ParameterizedTypeReference<>() {
                }
        );

        System.out.println(response.getBody());

        return response.getBody();
    }

    @SneakyThrows
    public FileDTO saveDiplom(UUID profileId, MultipartFile diplom) {

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É multipart/form-data
        restTemplate.setMessageConverters(List.of(
                new FormHttpMessageConverter(),
                new ByteArrayHttpMessageConverter()
        ));

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        restTemplate.getMessageConverters().add(new StringHttpMessageConverter(StandardCharsets.UTF_8));
        restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());

        String url = "http://localhost:8030/api/files/upload-diplom";
        HttpHeaders headers = integrationHelper.createAuthHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("profileId", profileId.toString());  // üëà –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        body.add("diplom", convertMultipartFileToResource(diplom));

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        ResponseEntity<FileDTO> response = restTemplate.exchange(
                url,
                HttpMethod.POST,
                requestEntity,
                new ParameterizedTypeReference<>() {
                }
        );

        System.out.println(response.getBody());

        return response.getBody();
    }

    private ByteArrayResource convertMultipartFileToResource(MultipartFile file) throws IOException {
        return new ByteArrayResource(file.getBytes()) {
            @Override
            public String getFilename() {
                return file.getOriginalFilename();
            }
        };
    }

}
